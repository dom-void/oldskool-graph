<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Oldskool Graph</title>
    <!-- <meta http-equiv="refresh" content="3"> -->
</head>
<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    :root {
        --accent-color: rgb(143, 252, 223);
        --front-color: rgb(92, 207, 176);
        --back-color: rgb(21, 78, 56);
    }

    body {
        font-family: Verdana, Geneva, Tahoma, sans-serif;
        background-color: var(--back-color);
        color: var(--front-color);
        width: 100vw;
        max-width: 910px;
        height: 100vh;
        margin: auto;
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        align-content: flex-start;
        justify-content: center;
        gap: 1.5em;
        padding-top: 5vh;
    }

    h1 {
        text-align: center;
        padding-inline: 0.5em;
    }

    canvas {
        width: 95vw;
        height: calc((5.5/9)*95vw);
    }

    button {
        background: transparent;
        color: var(--front-color);
        width: 10em;
        height: 2em;
        padding: auto;
        border-radius: 3px;
        border: 1px solid var(--front-color);
    }

    button:hover {
        color: var(--accent-color);
        border-color: var(--accent-color);
    }

    @media (min-width: 920px) {
        canvas {
            width: 900px;
            height: 550px;
        }
        body {
            gap: 2em;
        }
    }

</style>

<body>
    <header>
        <h1>
            Retro computer 3D graph simulator
        </h1>
    </header>
    <canvas id="screen" width="900" height="550" style="margin: auto;"></canvas>
    <aside>
        <section>
            <button id="grain"></button>
            <button id="transparent"></button>
        </section>
    </aside>

    <script>
        let cfg = {
            isGrained: false,
            isTransparent: false,
            depth: 10, // 2-10
            density: 5, // 2-10
            point: 2, // 1-5
            height: 135, // 1-155
            solidity: 97, // 90-99
        };

        const plot = (x, y) => scr.fillRect(x * 2, 545 - y * 2, cfg.point, cfg.point);

        const grain = (fn) => cfg.isGrained ? Math.round(fn) : fn;

        let screen = document.getElementById('screen');
        let scr = screen.getContext('2d');
        scr.fillStyle = 'rgb(92, 207, 176)';

        let btnGrain = document.querySelector('#grain');
        btnGrain.innerHTML = cfg.isGrained ? 'hi-res' : 'lo-res';
        
        let btnTransparent = document.querySelector('#transparent');
        btnTransparent.innerHTML = cfg.isTransparent ? 'opaque' : 'transparent';

        const draw = (config) => {
            scr.clearRect(0, 0, screen.width, screen.height);
            let m = new Array(450).fill(0);
            let a = Math.cos(Math.PI / config.depth);
            let e, c, d, z, x1, y1;
            for (let y = 1; y <= 230; y = y + config.density) {
                e = a * y;
                c = y - 115;
                c = c * c;
                for (let x = 1; x <= 230; x++) {
                    d = x - 115;
                    z = config.height * Math.exp((config.solidity - 101) * 0.0001 * (c + d * d));
                    x1 = grain(x + e);
                    y1 = grain(z + e);
                    if (y1 >= m[Math.round(x1)]) {
                        m[Math.round(x1)] = y1;
                        plot(x1, y1);
                    }
                    config.isTransparent && plot(x1, y1);
                }
            }
        }

        draw({...cfg});

        btnGrain.addEventListener('click', (e) => {
            const isGrained = !cfg.isGrained;
            cfg = {...cfg, isGrained};
            draw({...cfg});
            btnGrain.innerHTML = isGrained ? 'hi-res' : 'lo-res';
        });

        btnTransparent.addEventListener('click', () => {
            const isTransparent = !cfg.isTransparent;
            cfg = {...cfg, isTransparent};
            draw({...cfg});
            btnTransparent.innerHTML = isTransparent ? 'opaque' : 'transparent';
        })
    </script>
</body>

</html>